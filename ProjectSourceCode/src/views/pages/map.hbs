<!DOCTYPE html>
<html lang="en">
<head>
  <title>Google Maps Search with Autocomplete</title>
  <style>
    /* Basic styles for layout */
    body {
      font-family: Arial, sans-serif;
    }
    #map {
      height: 350px;
      width: 100%;
    }
    header {
      display: flex;
      gap: 10px;
      padding: 10px;
    }
    #searchInput {
      flex-grow: 1;
      padding: 5px;
    }
  </style>
  <!-- API key script will be loaded dynamically -->
</head>

<body>
  <!-- Input field for search key -->
  <header>
    <input type="text" id="searchInput" placeholder="Enter search keyword">
    <button id="searchButton">Search</button>
  </header>

  <!-- Div for the map -->
  <div id="map"></div>

  <script>
    var map;
    var service;
    var infowindow;
    var autocomplete;

    // Initialize the map and autocomplete
    function initMap() {
      // Begin in Boulder, Colorado
      var boulder = new google.maps.LatLng(40.015, -105.2705);
      infowindow = new google.maps.InfoWindow();
      map = new google.maps.Map(document.getElementById('map'), {
        center: boulder,
        zoom: 15
      });

      // Initialize autocomplete on search input
      var inputField = document.getElementById('searchInput');
      autocomplete = new google.maps.places.Autocomplete(inputField, {
        fields: ['name', 'geometry']
      });

      // Add listener for autocomplete selection
      autocomplete.addListener('place_changed', function () {
        var place = autocomplete.getPlace();
        if (place.geometry) {
          makeRequest(place.name);
        }
      });

      // Set up event listener for the search button
      document.getElementById('searchButton').addEventListener('click', function () {
        const searchKey = inputField.value;
        makeRequest(searchKey);
      });
    }

    // Function to make a request to Google Places API
    function makeRequest(searchKey) {
      // adjust this for moods
      var request = {
        query: searchKey,
        fields: ['name', 'geometry'],
      };

      var service = new google.maps.places.PlacesService(map);
      service.findPlaceFromQuery(request, function (results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          for (var i = 0; i < results.length; i++) {
            createMarker(results[i]);
          }
          map.setCenter(results[0].geometry.location);
        } else {
          console.error('REQUEST ERROR:', status);
        }
      });
    }

    // Function to create markers
    function createMarker(place) {
      var marker = new google.maps.Marker({
        map: map,
        position: place.geometry.location
      });

      google.maps.event.addListener(marker, 'click', function () {
        infowindow.setContent(place.name);
        infowindow.open(map, this);
      });
    }

    // Function to dynamically load the Google Maps API
    function loadGoogleMapsAPI(apiKey) {
      var script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMap&libraries=places`;
      script.async = true;
      script.defer = true;
      document.body.appendChild(script);
    }

    // Fetch the API key and load Google Maps
    fetch('/api/get-google-maps-key')
      .then(response => response.json())
      .then(data => {
        loadGoogleMapsAPI(data.apiKey);
      })
      .catch(error => {
        console.error('Error fetching API key:', error);
      });
  </script>
</body>
</html>