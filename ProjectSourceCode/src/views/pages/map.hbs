<!DOCTYPE html>
<html lang="en">

<head>
  <title>Google Maps Search with Mood Filter</title>
  <style>
    /* Basic styles for layout */
    body {
      font-family: Arial, sans-serif;
    }

    #map {
      height: 400px;
      width: 100%;
    }

    header {
      display: flex;
      gap: 10px;
      padding: 10px;
    }

    #searchInput,
    #moodInput {
      flex-grow: 1;
      padding: 5px;
    }
  </style>
  <!-- API key script will be loaded dynamically -->
</head>

<body>
  <!-- Input fields for search key and mood -->
  <header>
    <input class="form-control" type="text" id="searchInput" placeholder="Enter search keyword">
    <input class="form-control" type="text" id="moodInput" placeholder="Enter mood (e.g., cozy, lively)">
    <button class="btn btn-secondary" id="searchButton">Search</button>
  </header>

  <!-- Div for the map and mood selector-->
  <div class="container text-center my-5 ">
    <div class="row">
      <div class="col-7">
        <div id="map"></div>
      </div>
      <div class="col-1"></div>
      <div class="col-4 rounded-5 bg-light border border-3 secondary">
        <h3 class="my-5">What's the mood today?</h3>
        <div class="col">
          <div class="row my-2 mx-3">
            <button id="cozyButton" class="btn btn-danger bg-gradient p-2">Cozy</button>
          </div>
          <div class="row my-2 mx-3">
            <button id="livelyButton" style="background-color: rgb(255, 146, 36);" class="btn btn bg-gradient text-white p-2">Lively</button>
          </div>
          <div class="row my-2 mx-3">
            <button id="hungryButton" class="btn btn-primary bg-gradient p-2">Hungry</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    var map;
    var service;
    var infowindow;
    var autocomplete;
    var markers = [];

    // Initialize the map and autocomplete
    function initMap() {
      // Begin in Boulder, Colorado
      var boulder = new google.maps.LatLng(40.015, -105.2705);
      infowindow = new google.maps.InfoWindow();
      map = new google.maps.Map(document.getElementById('map'), {
        center: boulder,
        zoom: 13
      });

      // Initialize autocomplete on search input
      var inputField = document.getElementById('searchInput');
      autocomplete = new google.maps.places.Autocomplete(inputField, {
        fields: ['name', 'geometry']
      });

      // Add listener for autocomplete selection
      autocomplete.addListener('place_changed', function () {
        var place = autocomplete.getPlace();
        if (place.geometry) {
          makeNearbySearch(place.name);
        }
      });

      // Set up event listener for the search button
      document.getElementById('searchButton').addEventListener('click', function () {
        const searchKey = inputField.value;
        const mood = document.getElementById('moodInput').value;
        makeNearbySearch(searchKey, mood);
        makeNearbySearch(searchKey, mood);
      });

      // Event listener for cozy button
      document.getElementById('cozyButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "cozy");
      });

      // Event listener for lively button
      document.getElementById('livelyButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "lively");
      });

      // Event listener for hungry button
      document.getElementById('hungryButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "food");
      });
    }

    // Function to make a Nearby Search request
    function makeNearbySearch(searchKey, mood) {
      var boulder = new google.maps.LatLng(40.015, -105.2705);

      var request = {
        location: boulder,
        radius: 40000, // 6 km radius around Boulder
        keyword: `${searchKey} ${mood}`
      };

      var service = new google.maps.places.PlacesService(map);
      service.nearbySearch(request, function (results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          clearMarkers(); // Clear existing markers
          var bounds = new google.maps.LatLngBounds(); // Initialize bounds

          for (var i = 0; i < results.length; i++) {
            createMarker(results[i], bounds);
          }

          // Fit the map to the bounds containing all markers
          map.fitBounds(bounds);
        } else {
          console.error('REQUEST ERROR:', status);
        }
      });
    }

    // Function to create markers and extend bounds
    function createMarker(place, bounds) {
      if (!place.geometry || !place.geometry.location) {
        console.error("Location is undefined for place:", place);
        return;
      }

      var marker = new google.maps.Marker({
        map: map,
        position: place.geometry.location
      });

      markers.push(marker);

      // Extend the bounds to include each marker's location
      bounds.extend(place.geometry.location);

      google.maps.event.addListener(marker, 'click', function () {
        infowindow.setContent(place.name);
        infowindow.open(map, this);
      });
    }

    // Function to clear existing markers
    function clearMarkers() {
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
      }
      markers = [];
    }

    // Function to dynamically load the Google Maps API
    function loadGoogleMapsAPI(apiKey) {
      var script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMap&libraries=places`;
      script.async = true;
      script.defer = true;
      document.body.appendChild(script);
    }

    // Fetch the API key and load Google Maps
    fetch('/api/get-google-maps-key')
      .then(response => response.json())
      .then(data => {
        loadGoogleMapsAPI(data.apiKey);
      })
      .catch(error => {
        console.error('Error fetching API key:', error);
      });
  </script>
</body>

</html>